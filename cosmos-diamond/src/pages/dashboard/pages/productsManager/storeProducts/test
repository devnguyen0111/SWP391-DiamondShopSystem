 {/* <Modal
        title="Product Details"
        open={isDetailModalVisible}
        onCancel={handleDetailModalCancel}
        footer={[
          <Button key="cancel" onClick={handleDetailModalCancel}>
            Cancel
          </Button>,
          <Button
            key="submit"
            type="primary"
            loading={isLoading}
            onClick={() => {
              form
                .validateFields()
                .then((values) => {
                  handleUpdateProduct(values);
                })
                .catch((info) => {
                  console.log("Validate Failed:", info);
                });
            }}
          >
            Update
          </Button>,
        ]}
      >
        {isLoading ? (
          <p>Loading...</p>
        ) : selectedProduct ? (
          <Form form={form} layout="vertical" initialValues={selectedProduct}>
          
            <Form.Item
              label="Cover"
              name="coverId"
              rules={[{ required: true, message: "Please select a cover!" }]}
            >
              <Select>
                {covers.map((cover) => (
                  <Select.Option value={cover.coverId}>{cover.coverName}</Select.Option>
                ))}
              </Select>
            </Form.Item>
          </Form>
        ) : (
          <p>No product details available.</p>
        )}
      </Modal> */}

        // {
    //   title: "Detail",
    //   dataIndex: "detail",
    //   key: "detail",
    //   render: (_, data) => (
    //     <ConfigProvider
    //       theme={{
    //         components: {
    //           Button: {
    //             borderRadius: "18px",
    //             defaultBg: "white",
    //             defaultColor: "black",
    //             defaultHoverBg: "white",
    //             defaultHoverBorderColor: "black",
    //             defaultHoverColor: "black",
    //             defaultActiveBg: "black",
    //             defaultActiveBorderColor: "black",
    //             defaultActiveColor: "white",
    //           },
    //         },
    //       }}
    //     >
    //       <Button
    //         type="default"
    //         onClick={() => showDetailModal(data.productId)}
    //       >
    //         Detail
    //       </Button>
    //     </ConfigProvider>
    //   ),
    // },

    // const getProductDetail = async (productId) => {
    //     setIsLoading(true);
    //     try {
    //       const response = await api.get(`/api/Product/productDetail/${productId}`);
    //       setSelectedProduct(response.data);
    //       form.setFieldsValue(response.data);
    //       setIsLoading(false);
    //     } catch (e) {
    //       console.error(e);
    //       alertFail(e.response?.data || e.message);
    //       setIsLoading(false);
    //     }
    //   };
    
    
    
    //   const showDetailModal = (productId) => {
    //     getProductDetail(productId);
    //     setIsDetailModalVisible(true);
    //   };
    
    //   const handleDetailModalCancel = () => {
    //     setIsDetailModalVisible(false);
    //     setSelectedProduct(null);
    //   };
    
    //   const handleUpdateProduct = async (values) => {
    //     setIsLoading(true);
    //     try {
    //       await api.put(
    //         `/api/Product/updateProduct/${selectedProduct.productId}`,
    //         values
    //       );
    //       alertSuccess("Product updated successfully!");
    //       setIsDetailModalVisible(false);
    //       getProducts();
    //     } catch (e) {
    //       console.error(e);
    //       alertFail(e.response?.data || e.message);
    //     } finally {
    //       setIsLoading(false);
    //     }
    //   };

      